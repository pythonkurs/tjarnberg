test
2
2
2
3
3
3
4131993049699
10227819792731917
Filename: scripts/pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
    76                                     @profile
    77                                     def invert(a, b):
    78                                             '''Computes the inverse of a modulo b. b must be odd.
    79                             
    80    12.469 MB     0.000 MB   Returns the inverse of a (mod b).'''
    81   601.164 MB   588.695 MB                   if a == 0 or b == 0:
    82                                                     return 0
    83                             
    84   601.164 MB     0.000 MB                   truth = False
    85   601.164 MB     0.000 MB                   if a < 0:
    86                                                     truth = True
    87                                                     a = -a
    88                             
    89   601.164 MB     0.000 MB                   b_orig = b
    90   601.164 MB     0.000 MB                   alpha = 1
    91   231.691 MB  -369.473 MB                   beta = 0
    92                             
    93   600.809 MB   369.117 MB                   while not a & 1:
    94   600.809 MB     0.000 MB                           if alpha & 1:
    95   270.805 MB  -330.004 MB                                   alpha += b_orig
    96   600.809 MB   330.004 MB                           alpha >>= 1
    97   589.293 MB   -11.516 MB                           a >>= 1
    98                             
    99   601.164 MB    11.871 MB                   if b > a:
   100   601.164 MB     0.000 MB                           a, b = b, a
   101    12.617 MB  -588.547 MB                           alpha, beta = beta, alpha
   102                             
   103   601.180 MB   588.562 MB                   while b != 0 and a != b:
   104   601.180 MB     0.000 MB                           a -= b
   105   128.242 MB  -472.938 MB                           alpha -= beta
   106                             
   107   601.180 MB   472.938 MB                           while not a & 1:
   108   601.180 MB     0.000 MB                                   if alpha & 1:
   109   232.914 MB  -368.266 MB                                           alpha += b_orig
   110   601.180 MB   368.266 MB                                   alpha >>= 1
   111   601.180 MB     0.000 MB                                   a >>= 1
   112                                                     
   113   601.180 MB     0.000 MB                           if b > a:
   114   601.180 MB     0.000 MB                                   a,b = b,a
   115   601.180 MB     0.000 MB                                   alpha, beta = beta, alpha
   116                             
   117   601.180 MB     0.000 MB                   if a == b:
   118   601.180 MB     0.000 MB                           a -= b
   119   601.180 MB     0.000 MB                           alpha -= beta
   120   601.180 MB     0.000 MB                           a, b = b, a
   121   601.180 MB     0.000 MB                           alpha, beta = beta, alpha
   122                             
   123   601.180 MB     0.000 MB                   if a != 1:
   124   601.180 MB     0.000 MB                           return 0
   125    12.469 MB  -588.711 MB   
   126   600.844 MB   588.375 MB                   if truth:
   127                                                     alpha = b_orig - alpha
   128                                             
   129   600.844 MB     0.000 MB                   return alpha


Filename: scripts/pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   538                             @profile
   539                             def parallel_invert(l, n):
   540                                     '''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                             
   542    12.469 MB     0.000 MB   Returns the list with all elements inverted modulo 3(n-1).'''
   543    12.469 MB     0.000 MB           l_ = l[:]
   544   601.164 MB   588.695 MB           for i in xrange(len(l)-1):
   545   601.164 MB     0.000 MB                   l[i+1] = (l[i] * l[i+1]) % n
   546                                     
   547   601.180 MB     0.016 MB           inv = invert(l[-1], n)
   548   601.180 MB     0.000 MB           if inv == 0:
   549   601.180 MB     0.000 MB                   return gcd(l[-1], n)
   550    12.469 MB  -588.711 MB   
   551   600.926 MB   588.457 MB           for i in xrange(len(l)-1, 0, -1):
   552   600.926 MB     0.000 MB                   l[i] = (inv * l[i-1]) % n
   553   600.926 MB     0.000 MB                   inv = (inv * l_[i]) % n
   554   600.926 MB     0.000 MB           l[0] = inv
   555                             
   556   600.926 MB     0.000 MB           return l


Filename: scripts/pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   431                             @profile
   432                             def double(p, n):
   433                                     '''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                             
   435    12.469 MB     0.000 MB   Returns the doubled list.'''
   436    12.469 MB     0.000 MB           inv = range(len(p))
   437                             
   438   600.746 MB   588.277 MB           for i in xrange(len(p)):
   439   600.746 MB     0.000 MB                   inv[i] = p[i][1] << 1
   440                             
   441   600.926 MB     0.180 MB           inv = parallel_invert(inv, n)
   442                             
   443    12.469 MB  -588.457 MB           if not isinstance(inv, list):
   444                                             return inv
   445                             
   446   601.094 MB   588.625 MB           for i in xrange(len(p)):
   447   601.094 MB     0.000 MB                   x = p[i][0]
   448   601.094 MB     0.000 MB                   m = (x * x) % n
   449   601.094 MB     0.000 MB                   m = ((m + m + m + p[i][2]) * inv[i]) % n
   450   601.094 MB     0.000 MB                   p[i][0] = (m * m - x - x) % n
   451   601.094 MB     0.000 MB                   p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                             
   453   601.098 MB     0.004 MB           return p


